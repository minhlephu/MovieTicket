// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movie.INFARSTRUTURE;

#nullable disable

namespace Movie.INFARSTRUTURE.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240123110726_updateIdentity")]
    partial class updateIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.Booking", b =>
                {
                    b.Property<int>("bk_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("bk_id"), 1L, 1);

                    b.Property<int>("fare_id")
                        .HasColumnType("int");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<DateTime>("sale_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("seat_id")
                        .HasColumnType("int");

                    b.Property<int>("show_id")
                        .HasColumnType("int");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("bk_id");

                    b.HasIndex("fare_id");

                    b.HasIndex("seat_id");

                    b.HasIndex("user_id");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.Cinema", b =>
                {
                    b.Property<int>("cinema_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cinema_id"), 1L, 1);

                    b.Property<string>("cinema_address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cinema_email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cinema_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cinema_tel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("city_id")
                        .HasColumnType("int");

                    b.HasKey("cinema_id");

                    b.HasIndex("city_id");

                    b.ToTable("Cinemas", (string)null);
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.City", b =>
                {
                    b.Property<int>("city_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("city_id"), 1L, 1);

                    b.Property<int>("city_name")
                        .HasColumnType("int");

                    b.HasKey("city_id");

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.Fare", b =>
                {
                    b.Property<int>("fare_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("fare_id"), 1L, 1);

                    b.Property<string>("fare_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("unit_price")
                        .HasColumnType("int");

                    b.HasKey("fare_id");

                    b.ToTable("Fare", (string)null);
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.Genre", b =>
                {
                    b.Property<int>("genre_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("genre_id"), 1L, 1);

                    b.Property<string>("genre_name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("genre_id");

                    b.ToTable("genre", (string)null);
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.Movie", b =>
                {
                    b.Property<int>("mv_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mv_id"), 1L, 1);

                    b.Property<bool>("comming_soon")
                        .HasColumnType("bit");

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.Property<int?>("genre_id")
                        .HasColumnType("int");

                    b.Property<bool>("hot")
                        .HasColumnType("bit");

                    b.Property<string>("mv_name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("release_date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("show_now")
                        .HasColumnType("bit");

                    b.Property<string>("summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("trailer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("mv_id");

                    b.HasIndex("genre_id");

                    b.ToTable("Movies", (string)null);
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.Movie_type", b =>
                {
                    b.Property<int>("mv_type_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mv_type_id"), 1L, 1);

                    b.Property<string>("mv_type_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("surcharge")
                        .HasColumnType("int");

                    b.HasKey("mv_type_id");

                    b.ToTable("Movie_type", (string)null);
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.Seat", b =>
                {
                    b.Property<int>("seat_id")
                        .HasColumnType("int");

                    b.Property<int>("col_loc")
                        .HasColumnType("int");

                    b.Property<string>("row_loc")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("seat_type_id")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<int>("theater_id")
                        .HasColumnType("int");

                    b.HasKey("seat_id");

                    b.HasIndex("seat_type_id");

                    b.ToTable("Seats", (string)null);
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.Seat_type", b =>
                {
                    b.Property<int>("seat_type_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("seat_type_id"), 1L, 1);

                    b.Property<string>("seat_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("surcharge")
                        .HasColumnType("int");

                    b.HasKey("seat_type_id");

                    b.ToTable("Seat_type", (string)null);
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.Show", b =>
                {
                    b.Property<int>("show_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("show_id"), 1L, 1);

                    b.Property<DateTime>("end_time")
                        .HasColumnType("datetime2");

                    b.Property<int>("mv_id")
                        .HasColumnType("int");

                    b.Property<int>("mv_type_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("show_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("start_time")
                        .HasColumnType("datetime2");

                    b.Property<int>("theater_id")
                        .HasColumnType("int");

                    b.HasKey("show_id");

                    b.HasIndex("mv_id");

                    b.HasIndex("mv_type_id");

                    b.HasIndex("theater_id");

                    b.ToTable("Shows", (string)null);
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.Theater", b =>
                {
                    b.Property<int>("theater_id")
                        .HasColumnType("int");

                    b.Property<int>("cinema_id")
                        .HasColumnType("int");

                    b.Property<int>("col_qty")
                        .HasColumnType("int");

                    b.Property<int>("row_qty")
                        .HasColumnType("int");

                    b.Property<int>("seat_id")
                        .HasColumnType("int");

                    b.HasKey("theater_id");

                    b.ToTable("Theaters", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Movie.INFARSTRUTURE.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Movie.INFARSTRUTURE.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movie.INFARSTRUTURE.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Movie.INFARSTRUTURE.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.Booking", b =>
                {
                    b.HasOne("Movie.INFARSTRUTURE.Entities.Fare", "fare")
                        .WithMany("booking")
                        .HasForeignKey("fare_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movie.INFARSTRUTURE.Entities.Seat", "seat")
                        .WithMany("booking")
                        .HasForeignKey("seat_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movie.INFARSTRUTURE.Entities.ApplicationUser", "user")
                        .WithMany("booking")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("fare");

                    b.Navigation("seat");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.Cinema", b =>
                {
                    b.HasOne("Movie.INFARSTRUTURE.Entities.City", "city")
                        .WithMany("cinema")
                        .HasForeignKey("city_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("city");
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.Movie", b =>
                {
                    b.HasOne("Movie.INFARSTRUTURE.Entities.Genre", "genre")
                        .WithMany("movies")
                        .HasForeignKey("genre_id");

                    b.Navigation("genre");
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.Seat", b =>
                {
                    b.HasOne("Movie.INFARSTRUTURE.Entities.Theater", "theater")
                        .WithMany("seat")
                        .HasForeignKey("seat_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movie.INFARSTRUTURE.Entities.Seat_type", "seat_type")
                        .WithMany("seat")
                        .HasForeignKey("seat_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("seat_type");

                    b.Navigation("theater");
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.Show", b =>
                {
                    b.HasOne("Movie.INFARSTRUTURE.Entities.Movie", "movie")
                        .WithMany("show")
                        .HasForeignKey("mv_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movie.INFARSTRUTURE.Entities.Movie_type", "movie_type")
                        .WithMany("show")
                        .HasForeignKey("mv_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movie.INFARSTRUTURE.Entities.Theater", "theater")
                        .WithMany("show")
                        .HasForeignKey("theater_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("movie");

                    b.Navigation("movie_type");

                    b.Navigation("theater");
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.Theater", b =>
                {
                    b.HasOne("Movie.INFARSTRUTURE.Entities.Cinema", "cinema")
                        .WithMany("theater")
                        .HasForeignKey("theater_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cinema");
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.ApplicationUser", b =>
                {
                    b.Navigation("booking");
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.Cinema", b =>
                {
                    b.Navigation("theater");
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.City", b =>
                {
                    b.Navigation("cinema");
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.Fare", b =>
                {
                    b.Navigation("booking");
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.Genre", b =>
                {
                    b.Navigation("movies");
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.Movie", b =>
                {
                    b.Navigation("show");
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.Movie_type", b =>
                {
                    b.Navigation("show");
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.Seat", b =>
                {
                    b.Navigation("booking");
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.Seat_type", b =>
                {
                    b.Navigation("seat");
                });

            modelBuilder.Entity("Movie.INFARSTRUTURE.Entities.Theater", b =>
                {
                    b.Navigation("seat");

                    b.Navigation("show");
                });
#pragma warning restore 612, 618
        }
    }
}
